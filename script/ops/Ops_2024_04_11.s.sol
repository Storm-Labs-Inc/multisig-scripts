// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.18;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import { TimelockController } from "@openzeppelin/contracts/governance/TimelockController.sol";
import { RewardForwarder } from "cove-contracts-boosties/src/rewards/RewardForwarder.sol";
import { ERC20RewardsGauge } from "cove-contracts-boosties/src/rewards/ERC20RewardsGauge.sol";
import { CoveYearnGaugeFactory } from "cove-contracts-boosties/src/registries/CoveYearnGaugeFactory.sol";
import { CoveToken } from "cove-contracts-boosties/src/governance/CoveToken.sol";
import { console2 as console } from "forge-std/Console2.sol";
import { OpsMultisigScript } from "./OpsMultisigScript.s.sol";

contract Script is OpsMultisigScript {
    function run(bool shouldSend) public override {
        super.run(shouldSend);
        // Skip to after the timelock period
        vm.warp(1_712_977_079);

        address timelockController = deployer.getAddress("TimelockController");
        address coveToken = deployer.getAddress("CoveToken");
        address coveYfiRewardsGauge = deployer.getAddress("CoveYfiRewardsGauge");
        address coveYfiRewardsGaugeRewardForwarder = deployer.getAddress("CoveYFIRewardsGaugeRewardForwarder");
        CoveYearnGaugeFactory factory = CoveYearnGaugeFactory(deployer.getAddress("CoveYearnGaugeFactory"));
        CoveYearnGaugeFactory.GaugeInfo[] memory info = factory.getAllGaugeInfo(5, 0);

        // Start batch
        require(CoveToken(coveToken).allowedSender(coveYfiRewardsGauge) == false, "multicall already executed?");
        // https://etherscan.io/tx/0x7d43793b1a45e228c25c26fae4e18294abdba2893c595d15eea1d65f058d7df9#eventlog
        addToBatch(
            address(timelockController),
            0,
            abi.encodeCall(
                TimelockController.execute,
                (
                    coveToken,
                    0,
                    hex
                    bytes32(0),
                    bytes32(0)
                )
            )
        );
        require(CoveToken(coveToken).allowedSender(coveYfiRewardsGauge) == true, "multicall failed");

        // queueing up the rewards for epoch 0, week 0
        // 3.5M / 3 COVE to CoveYFIRewardsGauge
        // (1M / 5) / 3 COVE to each auto-compoiunding gauge
        addToBatch(
            coveToken,
            0,
            abi.encodeCall(IERC20.transfer, (coveYfiRewardsGaugeRewardForwarder, uint256(3_500_000 ether) / 3))
        );
        addToBatch(
            coveYfiRewardsGaugeRewardForwarder, 0, abi.encodeCall(RewardForwarder.forwardRewardToken, (coveToken))
        );
        require(CoveToken(coveToken).balanceOf(coveYfiRewardsGauge) == uint256(3_500_000 ether) / 3, "Forward failed");
        require(ERC20RewardsGauge(coveYfiRewardsGauge).getRewardData(address(coveToken)).rate > 0, "rate not set");
        for (uint256 j = 0; j < info.length; j++) {
            address autoCompoundingGaugeRewardForwarder =
                ERC20RewardsGauge(info[j].autoCompoundingGauge).getRewardData(address(coveToken)).distributor;
            console.log("Queueing up rewards for gauge", info[j].autoCompoundingGauge);
            addToBatch(
                coveToken,
                0,
                abi.encodeCall(
                    IERC20.transfer, (autoCompoundingGaugeRewardForwarder, (uint256(1_000_000 ether) / 5) / 3)
                )
            );
            addToBatch(
                autoCompoundingGaugeRewardForwarder, 0, abi.encodeCall(RewardForwarder.forwardRewardToken, (coveToken))
            );
            require(
                ERC20RewardsGauge(info[j].autoCompoundingGauge).getRewardData(address(coveToken)).rate > 0,
                "rate not set"
            );
        }

        // Execute batch
        if (shouldSend) executeBatch(true);
    }
}
